{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "utcValue": {
            "type": "string",
            "metadata": {
                "description": "Returns the current (UTC) datetime value in the specified format. If no format is provided, the ISO 8601 (yyyyMMddTHHmmssZ) format is used"
            },
            "defaultValue": "[utcNow()]"
        },
        "pickScenario": {
            "type": "string",
            "allowedValues": [
                "Day1",
                "Day2"
            ],
            "metadata": {
                "description": "The Evaluations emulation is split into two distinct scenarios (Days 1 and 2) to reflect these differing operational flows and toolkits used by APT29."
            }
        },
        "setDataPipeline": {
            "type": "string",
            "allowedValues": [
                "AZURESENTINEL"
            ],
            "metadata": {
                "description": "The specific data pipeline that you would like to use to aggregate and analyze security events"
            }
        },
        "useCalderaDIY": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Do you want to use the Caldear DIY Plugin? Reference: https://github.com/mitre-attack/attack-arsenal/tree/master/adversary_emulation/APT29/CALDERA_DIY/evals"
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for all Virtual Machines."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for all Virtual Machines. If you want to enable SSH key authentication for Linux virtual machines, make sure you set the 'linuxAuthenticationType' parameter to 'sshPublicKey' and provide the SSH Public Key string via the 'linuxAdminKey' parameter."
            }
        },
        "linuxAuthenticationType": {
            "type": "string",
            "defaultValue": "password",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "metadata": {
                "description": "Type of authentication to use on the Linux Virtual Machine. SSH key is recommended."
            }
        },
        "linuxAdminKey": {
            "type": "securestring",
            "metadata": {
                "description": "SSH Key to authenticate against Linux Virtual Machines. Provide the SSH rsa public key file as a string. Use \"ssh-keygen -t rsa -b 2048\" to generate your SSH key pairs."
            },
            "defaultValue": ""
        },
        "windowsDesktopSKU": {
            "type": "string",
            "defaultValue": "19h1-pro",
            "metadata": {
                "description": "The Windows virtual machine release distribution. (e.g. Version 1903 -> 19h1)"
            }
        },
        "windowsDesktopVersion": {
            "type": "string",
            "defaultValue": "latest"
        },
        "windowsDesktopVmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s",
            "allowedValues": [
                "Standard_B2s",
                "Standard_A3"
            ],
            "metadata": {
                "description": "Size of the virtual machine. Reference: https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general"
            }
        },
        "windowsServerSKU": {
            "type": "string",
            "defaultValue": "2019-Datacenter",
            "allowedValues": [
                "2019-Datacenter"
            ],
            "metadata": {
                "description": "The Windows version for the Server VM. This will pick a fully patched image of this given Windows version."
            }
        },
        "windowsServerVersion": {
            "type": "string",
            "defaultValue": "latest",
            "allowedValues": [
                "latest"
            ]
        },
        "windowsServerVmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s",
            "allowedValues": [
                "Standard_B2s",
                "Standard_A3"
            ],
            "metadata": {
                "description": "Size of the virtual machine."
            }
        },
        "ubuntuSKU": {
            "type": "string",
            "defaultValue": "18.04-LTS",
            "allowedValues": [
                "12.04.5-LTS",
                "14.04.5-LTS",
                "16.04.0-LTS",
                "18.04-LTS",
                "19.04"
            ],
            "metadata": {
                "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version."
            }
        },
        "linuxVmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s",
            "allowedValues": [
                "Standard_B2s",
                "Standard_A3"
            ],
            "metadata": {
                "description": "Size of the virtual machine. Reference: https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general"
            }
        },
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/Cl0ud-Sm3gaL/azure-range/main/",
            "metadata": {
                "description": "The location of resources, such as templates and DSC modules, that the template depends on"
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Auto-generated token to access _artifactsLocation. Leave it blank unless you need to provide your own value."
            }
        },
        "domainFQDN": {
            "type": "string",
            "defaultValue": "rookrange.local",
            "metadata": {
                "description": "The FQDN of the Active Directory Domain to be created"
            }
        },
        "domainJoinOptions": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "Set of bit flags that define the join options. Default value of 3 is a combination of NETSETUP_JOIN_DOMAIN (0x00000001) & NETSETUP_ACCT_CREATE (0x00000002) i.e. will join the domain and create the account on the domain. For more information see https://msdn.microsoft.com/en-us/library/aa392154(v=vs.85).aspx"
            }
        },
        "clientRootCertName": {
            "type": "string",
            "metadata": {
                "description": "The name of the client root certificate used to authenticate VPN clients. This is a common name used to identify the root cert."
            }
        },
        "clientRootCertData": {
            "type": "string",
            "metadata": {
                "description": "Client root certificate data used to authenticate VPN clients."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        }
    },
    "variables": {
        "storageAccountName": "[concat(uniquestring(resourceGroup().id, parameters('utcValue')))]",
        
        "virtualNetworkNameA": "vnet-RRPROD",
        "virtualNetworkAddressRangeA": "10.0.0.0/16",
        "subnetName1": "snet-DMZ",
        "subnetRange1": "10.0.0.0/24",
        "subnetRef1": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkNameA'), variables('subnetName1'))]",
        "subnetName2": "snet-Internal",
        "subnetRange2": "10.0.1.0/24",
        "subnetRef2": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkNameA'), variables('subnetName2'))]",
        "subnetName3": "GatewaySubnet",
        "subnetRange3": "10.0.2.0/24",
        "subnetRef3": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkNameA'), variables('subnetName3'))]",
        
        "virtualNetworkGateway": "vnetgw-external",
        "vpnClientAddressPoolPrefix": "172.18.39.0/24",
        
        "virtualNetworkNameB": "vnet-external",
        "virtualNetworkAddressRangeB": "192.168.0.0/16",
        "subnetName4": "snet-external",
        "subnetRange4": "192.168.0.0/24",
        "subnetRef4": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkNameB'), variables('subnetName4'))]",

        "customScriptExTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/customScriptExtension.json', parameters('_artifactsLocationSasToken')))]",
        "dockerInstallScript": "[uri(parameters('_artifactsLocation'), 'resources/scripts/bash/Install-Docker.sh')]",
        "prepareBoxScript": "[uri(parameters('_artifactsLocation'), 'resources/scripts/powershell/misc/Prepare-Box.ps1')]",
        "enableWinAuditCategories": "[uri(parameters('_artifactsLocation'), 'resources/scripts/powershell/auditing/Enable-WinAuditCategories.ps1')]",
        "enablePowerShellLoggingScript": "[uri(parameters('_artifactsLocation'), 'resources/scripts/powershell/auditing/Enable-PowerShell-Logging.ps1')]",
        "installAgentScript": "[uri(parameters('_artifactsLocation'), 'resources/scripts/powershell/endpoint-software/Install-Sysmon.ps1')]",
        "downloadSACLScript": "[uri(parameters('_artifactsLocation'), 'Set-AuditRule/Set-AuditRule.ps1')]",
        "setSACLScript": "[uri(parameters('_artifactsLocation'), 'resources/scripts/powershell/auditing/Set-SACLs.ps1')]",
        "setIPAddressScript": "[uri(parameters('_artifactsLocation'), 'resources/scripts/powershell/misc/Set-StaticIP.ps1')]", 
        "wefSubscriptionsUrl": "[uri(parameters('_artifactsLocation'), 'resources/configs/wef/subscriptions.zip')]",
        "setWallPaperScript": "[uri(parameters('_artifactsLocation'), 'resources/scripts/powershell/misc/Set-WallPaper.ps1')]",

        "endpointsDefault": [
            {
                "tag": "domainController",
                "vmName": "RRDCB01", //NEWYORK
                "os": "windows",
                "subnetref": "[variables('subnetRef1')]",
                "ipAddress": "10.0.0.4",
                "vmSize": "[parameters('windowsServerVmSize')]",
                "publisher": "MicrosoftWindowsServer",
                "offer": "WindowsServer",
                "sku": "[parameters('windowsServerSKU')]",
                "version": "[parameters('windowsServerVersion')]"
            },
            {
                "tag": "workstation",
                "vmName": "RRWSB01", //SCRANTON
                "os": "windows",
                "subnetref": "[variables('subnetRef2')]",
                "ipAddress": "10.0.1.4",
                "vmSize": "[parameters('windowsDesktopVmSize')]",
                "publisher": "MicrosoftWindowsDesktop",
                "offer": "Windows-10",
                "sku": "[parameters('windowsDesktopSKU')]",
                "version": "[parameters('windowsDesktopVersion')]"
            },
            {
                "tag": "workstation",
                "vmName": "RRWSB02", //UTICA
                "os": "windows",
                "subnetref": "[variables('subnetRef2')]",
                "ipAddress": "10.0.1.5",
                "vmSize": "[parameters('windowsDesktopVmSize')]",
                "publisher": "MicrosoftWindowsDesktop",
                "offer": "Windows-10",
                "sku": "[parameters('windowsDesktopSKU')]",
                "version": "[parameters('windowsDesktopVersion')]"
            },
            {
                "tag": "workstation",
                "vmName": "RRWSB03", //NASHUA
                "os": "windows",
                "subnetref": "[variables('subnetRef2')]",
                "ipAddress": "10.0.1.6",
                "vmSize": "[parameters('windowsDesktopVmSize')]",
                "publisher": "MicrosoftWindowsDesktop",
                "offer": "Windows-10",
                "sku": "[parameters('windowsDesktopSKU')]",
                "version": "[parameters('windowsDesktopVersion')]"
            },
            {
                "tag": "c2",
                "vmName": "TEAMSERVER",
                "os": "linux",
                "subnetref": "[variables('subnetRef4')]",
                "ipAddress": "192.168.0.4",
                "vmSize": "[parameters('linuxVmSize')]",
                "publisher": "Canonical",
                "offer": "UbuntuServer",
                "sku": "[parameters('ubuntuSKU')]",
                "version": "latest"
            }
        ],
        "endpointRedirector": [
            {
                "tag": "redirector",
                "vmName": "REDIRECTOR",
                "os": "linux",
                "subnetref": "[variables('subnetRef4')]",
                "ipAddress": "192.168.0.5",
                "vmSize": "[parameters('linuxVmSize')]",
                "publisher": "Canonical",
                "offer": "UbuntuServer",
                "sku": "[parameters('ubuntuSKU')]",
                "version": "latest"
            }
        ],

        "endpointsLogging": [
            {
                "tag": "logCollector",
                "vmName": "WEC",
                "os": "windows",
                "subnetref": "[variables('subnetRef2')]",
                "ipAddress": "10.0.1.10",
                "vmSize": "[parameters('windowsDesktopVmSize')]",
                "publisher": "MicrosoftWindowsDesktop",
                "offer": "Windows-10",
                "sku": "[parameters('windowsDesktopSKU')]",
                "version": "[parameters('windowsDesktopVersion')]"
            }
        ],

        "endpointsScenario": "[if(and(equals(parameters('pickScenario'), 'Day1'), not(parameters('useCalderaDIY'))), concat(variables('endpointsDefault'), variables('endpointRedirector')), variables('endpointsDefault'))]",
        "endpoints": "[if(contains(parameters('setDataPipeline'), 'LOGSTASH'), concat(variables('endpointsScenario'), variables('endpointsLogging')),variables('endpointsScenario'))]",

        "patientZero": "[ variables('endpoints')[2].vmName]",

        "domainNameArray": "[split(parameters('domainFQDN'),'.')]"
    },
    "resources": [
        {
            "name": "SetPatientZero",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customScriptExTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "extensionName": {
                        "value": "SetUpWKS"
                    },
                    "commandToExecute": {
                        "value": "[concat('powershell -ExecutionPolicy Unrestricted -File ./Set-Victim.ps1', ' ', '-scenario', ' ', parameters('pickScenario'), ' ', if(parameters('useCalderaDIY'), concat('-domainName', ' ', variables('domainNameArray')[0], ' ', '-useCalderaDIY'), concat('-domainName', ' ', variables('domainNameArray')[0])))]"
                    },
                    "fileUris": {
                        "value": [
                            "[uri(parameters('_artifactsLocation'), 'scripts/Set-Victim.ps1')]",
                            "[uri(parameters('_artifactsLocation'), concat('', if(parameters('useCalderaDIY'), 'scripts/Invoke-Sandcat.ps1', concat('payloads/', if(equals(parameters('pickScenario'), 'Day1'), 'day1', 'day2'), '/victim.zip'))))]"
                        ]
                    },
                    "vmName": {
                        "value": "[variables('patientZero')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[equals(parameters('pickScenario'), 'Day1')]",
            "name": "SetSecondVictim",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customScriptExTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "extensionName": {
                        "value": "SetUpWKS"
                    },
                    "commandToExecute": {
                        "value": "[concat('powershell.exe -ExecutionPolicy Unrestricted -Command \"Add-LocalGroupMember -Group Administrators -Member', ' ', variables('domainNameArray')[0],'\\mlillard\"')]"
                    },
                    "fileUris": {
                        "value": []
                    },
                    "vmName": {
                        "value": "[variables('endpoints')[3].vmName]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        }
    ],
    "outputs": {

        }
}
